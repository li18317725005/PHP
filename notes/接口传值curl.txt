//curl post请求
	private function post($url, $post_data = '', $timeout = 5){
	    $ch = curl_init();
	    curl_setopt ($ch, CURLOPT_URL, $url);
	    curl_setopt ($ch, CURLOPT_POST, 1);
	    if($post_data != ''){
	        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
	    }
	    curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
	    curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
	    curl_setopt($ch, CURLOPT_HEADER, false);
	    $file_contents = curl_exec($ch);
	    curl_close($ch);
	    // TODO: 此处需处理网络异常，并记录日志到独立的文件中
	    return $file_contents;
	}




	private function https_request($url,$data = null){
	    $curl = curl_init();
	    curl_setopt($curl,CURLOPT_URL,$url);
	    curl_setopt($curl,CURLOPT_SSL_VERIFYPEER,0);
	    curl_setopt($curl,CURLOPT_SSL_VERIFYHOST,0);
	    if(!empty($data)){
	        curl_setopt($curl,CURLOPT_POST,1);
	        curl_setopt($curl,CURLOPT_POSTFIELDS,$data);
	    }
	    curl_setopt($curl,CURLOPT_RETURNTRANSFER,1);
	    $output = curl_exec($curl);
	    curl_close($curl);
	    return $output;
	}



	//get的方式
	public static function curl_get($url){  
       $testurl = $url;  
       $ch = curl_init();    
       curl_setopt($ch, CURLOPT_URL, $testurl);    
        //参数为1表示传输数据，为0表示直接输出显示。  
       curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  
        //参数为0表示不带头文件，为1表示带头文件  
       curl_setopt($ch, CURLOPT_HEADER,0);  
       $output = curl_exec($ch);   
       curl_close($ch);   
       return $output;  
    }



/**

 * @param $url 请求网址

 * @param array $params 请求参数

 * @param int $ispost 请求方式 0 get 方式  1 post 方式

 * @param int $https https协议 0 http 协议 1 https 协议

 * @return bool|mixed

 */

function curl($url, $params = false, $ispost = 0, $https = 0)
{
	$httpInfo = array();
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
	curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36');
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
	curl_setopt($ch, CURLOPT_TIMEOUT, 30);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	if ($https) {
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); // 对认证证书来源的检查
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); // 从证书中检查SSL加密算法是否存在
	}
	if ($ispost) {
		curl_setopt($ch, CURLOPT_POST, true);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
		curl_setopt($ch, CURLOPT_URL, $url);
	} else {

		if ($params) {
			if (is_array($params)) {
				$params = http_build_query($params);
			}
			curl_setopt($ch, CURLOPT_URL, $url . '?' . $params);
		} else {
			curl_setopt($ch, CURLOPT_URL, $url);
		}
	}
	$response = curl_exec($ch);
	if ($response === FALSE) {
		//echo "cURL Error: " . curl_error($ch);
		return false;
	}
	$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	$httpInfo = array_merge($httpInfo, curl_getinfo($ch));
	curl_close($ch);
	return $response;
}
